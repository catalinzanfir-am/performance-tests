import hudson.tasks.test.AbstractTestResultAction
import java.util.Optional
import hudson.model.Actionable
import hudson.tasks.junit.CaseResult
import groovy.json.*

node {

    stage ("Get app"){
        checkout scm
    }

    stage ("Get mvn image") {
        def dockerImage = getDockerImage()
        def cwd = pwd()

        executeInContainer(dockerImage, cwd, {
            stage ("Compile application") {
                sh "mvn clean compile -Dorg.slf4j.simpleLogger.defaultLogLevel=error -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -DskipTests"
            }
            stage ("Run tests") {
                sh "mvn gatling:test -Dgatling.simulationClass=Simulations.TestSim"
            }
        })
    }

    stage("publish results") {

    }

    stage ("Send stop notification") {
    }
}

def getDockerImage(){
    def dockerImage = docker.image("romicaraicu/gatling-docker:latest ")
    dockerImage.pull()

    return dockerImage
}

def executeInContainer(dockerImage, workingDirectory, callback) {
  dockerImage.inside("-v ${workingDirectory}:/tmp -w /tmp") {
    callback()
  }
}


def info(String message){
    ansiColor('xterm') {
        echo "\u001b[1m\u001b[36m[ INFO:  ]\u001b[0m " + message
    }
}